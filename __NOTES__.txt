
= TODOS =

- Jackalope::Web::Service
    - this should be able to take an array of schemas
        - it does not need to keep a ref to them,
          it can simply register them and gather
          the IDs
    - this should own the Router instance
        - this makes it easier for it to process
          more then one schema in a single service
        - during creation of the Router, it should
          look in the metadata for possible hints
          as to what type of Target class to use
            - Jackalope::Web::Route::Target is the default

- Jackalope.Schema.Repository
    - refactor the compilation process
      to match the Perl version

== LOW PRIORITY ==

- Jackalope.js
    - add some kind of basic Bread-Board type thing

- Jackalope::Schema::Spec & Jackalope.Schema.Spec
    - perhaps use that description cleanup method in GenerateSpec on the actual spec

- Test::Jackalope & Test.Jackalope
    - write .toJSON methods that strip the __compiled_* stuff from the output of schemas
    - validation_fail should also take some kind of
      test to check the right error appears
        - fixtures will need to support this too

- test_fixtures
    - write more of them

- Jackalope::Schema::Validator::Core
    - make it use Moose types to check against

- Jackalope::Serializer
    - Jackalope::Serializer::XML (TODO - perigrin)
    - Jackalope::Serializer::YAML (why??)

== PERHAPS ==

- Jackalope::API::*
    - create a set of roles that can be used
      in the Bread::Board config to typemap
      to concrete classes
    - NOTE: I tried this, it didn't feel right
      but should keep the idea around just in case
