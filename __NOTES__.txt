
= TODOS =

- schema/core/hyperlink
    - add a label field which
      can be used to link to
      other elements
    - http://www.w3.org/TR/xlink/

- HTTP status codes
    - https://demo.staging.fellowshiponeapi.com/v1/Util/HttpStatusCodes.help

- Jackalope::Web::Service
    - we should pass in a Factory to the Web::Service and the factory
      can choose which type of target object based on patterns
      if no pattern exists then ...
      - target_class in the link->metadata should handle names like Moose Traits and Catalyst plugins
          +Some::Full::Path => is handled straight
          Another           => becomes Jackalope::Route::Target::Another

- Jackalope::Web::Route::Target::REST::
    - these should be able to rely on some simple conventions
      in the links for the various CRUD actions and be able to
      ask the router for the URIs
    - we need to write defaults into the route so that they
      can be idenfified from the outside and URIs can be created
        - at a min. we should have the label, but the combo
          of the label, method and relation should do enough
    - it can make some assumptions about the repository
      knowing that it is going to use the Jackalope::ResourceRepository
      role, this should simplify the metadata even more

- Jackalope::ResourceRepository
    - a role whose interface we can depend on
      to do CRUD operations and such

- Jackalope::Web::Error::
    - a set of Throwable exceptions for the various
      HTTP status codes
        - 204 No Content (??)
        - 304 Not Modified
        - 400 Bad Request
        - 404 Not Found
        - 409 Conflict
        - 500 server error
    - these can be thrown by the Model classes to
      communicate with the Route::Target classes

- Jackalope.Schema.Repository
    - refactor the compilation process
      to match the Perl version

- read up on ETags
    - http://en.wikipedia.org/wiki/HTTP_ETag

== LOW PRIORITY ==

- Jackalope.js
    - add some kind of basic Bread-Board type thing

- Jackalope::Schema::Spec & Jackalope.Schema.Spec
    - perhaps use that description cleanup method in GenerateSpec on the actual spec

- Test::Jackalope & Test.Jackalope
    - write .toJSON methods that strip the __compiled_* stuff from the output of schemas
    - validation_fail should also take some kind of
      test to check the right error appears
        - fixtures will need to support this too

- test_fixtures
    - write more of them

- Jackalope::Schema::Validator::Core
    - make it use Moose types to check against

- Jackalope::Serializer
    - Jackalope::Serializer::XML (TODO - perigrin)
    - Jackalope::Serializer::YAML (why??)

== PERHAPS ==

- Jackalope::API::*
    - create a set of roles that can be used
      in the Bread::Board config to typemap
      to concrete classes
    - NOTE: I tried this, it didn't feel right
      but should keep the idea around just in case

== LINKS ==

http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
http://en.wikipedia.org/wiki/Representational_State_Transfer
http://martinfowler.com/articles/richardsonMaturityModel.html
http://code.msdn.microsoft.com/cannonicalRESTEntity
http://www.w3.org/TR/xforms/
http://thisweekinrest.wordpress.com/
http://tools.ietf.org/html/rfc5988
http://alexscordellis.blogspot.com/2010/11/restful-architecture-what-should-we-put.html
http://restinpractice.com/default.aspx


